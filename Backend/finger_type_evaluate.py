# -*- coding: utf-8 -*-
"""finger_type_evaluate.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ALlg88yqTyxOdXDPwKc-4MXbylQWUYVW
"""

import numpy as np
import pandas as pd
import seaborn as sns
import tensorflow as tf

import os
import cv2

import matplotlib.pyplot as plt

def extract_label(img_path,underscore_flag ):
    filename, _ = os.path.splitext(os.path.basename(img_path))

    subject_id, etc = filename.split('__')

    if underscore_flag:
      gender,lr, finger, _, _ = etc.split('_')
    else:
      gender,lr, finger,  _ = etc.split('_')

    if finger == 'thumb':
        finger = 0
    elif finger == 'index':
        finger = 1
    elif finger == 'middle':
        finger = 2
    elif finger == 'ring':
        finger = 3
    elif finger == 'little':
        finger = 4

    return np.array([finger], dtype=np.uint16)

def loading_data(path,boolean):
    data = []

    for img in os.listdir(path):
            img_array = cv2.imread(os.path.join(path, img), cv2.IMREAD_GRAYSCALE)
            img_resize = cv2.resize(img_array, (96,96))
            label = extract_label(os.path.join(path, img),boolean)
            data.append([label[0], img_resize ])


    return data

path='/content/drive/MyDrive/thumb'

data=loading_data(path,False)

number_of_elements = len(data)

print("Number of elements in the list:", number_of_elements)

img, labels = [], []
for label, feature in data:
    labels.append(label)
    img.append(feature)

x_test,y_test= [], []

x_test2,y_test2= [], []

x_test = np.array(img).reshape(-1, 96, 96, 1)
y_test = np.array(labels)
print(x_test.ndim)
print(x_test.shape)
print(y_test.ndim)
print(y_test.shape)
print(x_test[0])

x_test2 = x_test/255
y_test2 = y_test
print(x_test.ndim)
print(x_test.shape)
print(y_test.ndim)
print(y_test.shape)
print(x_test2[0])

import joblib

model=joblib.load('/content/drive/MyDrive/fp_model_finger.joblib')

model.evaluate(x_test,y_test)

model.evaluate(x_test2,y_test2)

cnt=0

predictions = model.predict(x_test)
predictions2 = model.predict(x_test2)

print(predictions.ndim)
print(predictions.shape)

print(predictions2.ndim)
print(predictions2.shape)

print(predictions[0])

print(predictions2[0])

thumb_cnt=0
index_cnt=0
middle_cnt=0
ring_cnt=0
little_cnt=0

predicted = [np.argmax(i) for i in predictions]
print(type(predicted))
predicted=np.array(predicted)
aa=[predictions[i][predicted]for i in range(len(predictions))]
print(f"Index of the maximum element: {predicted}")
for finger in np.nditer(predicted):
    if finger ==0:
     print("thumb",end=" ")
     thumb_cnt+=1
    elif finger == 1:
         print("index",end=" ")
         index_cnt+=1
    elif finger == 2:
         print("middle",end=" ")
         middle_cnt+=1
    elif finger ==3:
         print("ring",end=" ")
         ring_cnt+=1
    elif finger == 4:
         print("little",end=" ")
         little_cnt+=1

print("\n",thumb_cnt, " \n", index_cnt," \n",middle_cnt,"\n ",ring_cnt,"\n ",little_cnt,"\n ")

acc=(thumb_cnt/number_of_elements)*100
print("accuracy is:",acc)

thumb_cnt2=0
index_cnt2=0
middle_cnt2=0
ring_cnt2=0
little_cnt2=0

predicted2= [np.argmax(i) for i in predictions2]
print(type(predicted2))
predicted2=np.array(predicted2)
aa=[predictions2[i][predicted2]for i in range(len(predictions2))]
print(f"Index of the maximum element: {predicted2}")
for finger in np.nditer(predicted2):
    if finger ==0:
     print("thumb",end=" ")
     thumb_cnt2+=1
    elif finger == 1:
         print("index",end=" ")
         index_cnt2+=1
    elif finger == 2:
         print("middle",end=" ")
         middle_cnt2+=1
    elif finger ==3:
         print("ring",end=" ")
         ring_cnt2+=1
    elif finger == 4:
         print("little",end=" ")
         little_cnt2+=1

print("\n",thumb_cnt2, " \n", index_cnt2," \n",middle_cnt2,"\n ",ring_cnt2,"\n ",little_cnt2,"\n ")

acc2=(thumb_cnt2/number_of_elements)*100
print("accuracy is:",acc2)